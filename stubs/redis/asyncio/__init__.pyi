from typing import Any, Dict, Generic, List, Mapping, Optional, Sequence, TypeVar, Union

_T = TypeVar("_T")

class Redis(Generic[_T]):
    """Async Redis client with proper typing for stream methods."""

    async def get(self, key: str) -> _T | None: ...
    async def set(self, key: str, value: _T) -> bool: ...
    async def delete(self, *keys: str) -> int: ...
    async def expire(self, key: str, seconds: int) -> bool: ...
    async def setex(self, key: str, seconds: int, value: _T) -> bool: ...
    async def exists(self, *keys: str) -> int: ...
    async def keys(self, pattern: str = "*") -> list[_T]: ...
    async def scan(
        self,
        cursor: int = 0,
        match: str | None = None,
        count: int | None = None,
    ) -> tuple[int, list[_T]]: ...
    async def ping(self) -> bool: ...

    # Hash commands
    async def hset(
        self,
        name: str,
        key: str | None = None,
        value: str | bytes | None = None,
        mapping: Mapping[str | bytes, bytes | float | int | str] | None = None,
    ) -> int: ...
    async def hget(self, name: str, key: str) -> _T | None: ...
    async def hgetall(self, name: str) -> dict[bytes, bytes]: ...
    async def hdel(self, name: str, *keys: str) -> int: ...

    # List commands
    async def blpop(self, keys: list[str] | str, timeout: int = 0) -> tuple[_T, _T] | None: ...
    async def rpush(self, name: str, *values: str | bytes) -> int: ...

    # Stream commands
    async def xadd(
        self,
        stream: str,
        fields: dict[str | bytes, str | bytes],
        maxlen: int | None = None,
        approximate: bool = True,
    ) -> str: ...
    async def xreadgroup(
        self,
        group: str,
        consumer: str,
        streams: dict[str, str],
        count: int | None = None,
        block: int | None = None,
    ) -> list[tuple[str, list[tuple[str, dict[bytes, bytes]]]]]: ...
    async def xack(self, stream: str, group: str, *message_ids: str) -> int: ...
    async def xgroup_create(
        self, stream: str, group: str, id: str = "$", mkstream: bool = False
    ) -> bool: ...
    async def xpending(
        self,
        stream: str,
        group: str,
        start: str | None = None,
        end: str | None = None,
        count: int | None = None,
        consumer: str | None = None,
    ) -> dict[str, Any]: ...
    async def xinfo_groups(self, stream: str) -> list[dict[str, Any]]: ...
    async def xinfo_stream(self, stream: str) -> dict[str, Any]: ...
    async def xpending_range(
        self,
        name: str,
        groupname: str,
        min: str = "-",
        max: str = "+",
        count: int = 10,
        consumer: str | None = None,
    ) -> list[list[Any]]: ...
    async def xlen(self, stream: str) -> int: ...

    # Other methods
    async def close(self) -> None: ...
    def __await__(self) -> Any: ...  # For connection initialization

def from_url(url: str, **kwargs: Any) -> Redis[bytes]: ...
