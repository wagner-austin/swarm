---
services:
  # Redis removed - using Upstash from .env instead

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin  # change after first login
      # Keep Grafana output terse; WARN and above matches Loki & bot
      - GF_LOG_LEVEL=warn  # Reduce from default 'info' to 'warn'
      - GF_LOG_FILTERS=tsdb.loki:warn  # Reduce Loki data source logging
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  loki:
    image: grafana/loki:3.2.0   # newer maintenance release
    container_name: loki
    volumes:
      - ./loki-config.yml:/etc/loki/local-config.yaml:ro
      - ./loki-data:/tmp/loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"   # Loki HTTP API
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  alloy:
    # v1.9.2 is the latest GA release (2025-06-27); pin for repeatable builds
    image: grafana/alloy:v1.9.2
    container_name: alloy
    volumes:
      - ./alloy-config.river:/etc/alloy/config.river:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    # Allow Alloy's non-root user to access the Docker socket
    group_add:
      - "${DOCKER_GID:-0}"
    command:
      - run
      - /etc/alloy/config.river
      - --server.http.listen-addr=0.0.0.0:12345
    ports:
      - "12345:12345"  # Alloy UI
    depends_on:
      - loki
    healthcheck:
      test:
        - CMD
        - sh
        - -c
        - |
          ps aux | grep -v grep | grep '/bin/alloy run' || exit 1
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 120s
    restart: unless-stopped

  bot:
    image: discord-bot:latest
    build:
      context: .
      target: runtime-bot
    container_name: bot
    env_file:
      - .env
    # Discord frontend (no local workers)
    volumes:
      - .:/app
      - C:\Users\Test\.config\discord-bot\personas\personas.yaml:/root/.config/discord-bot/personas/personas.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For DockerApiBackend
    depends_on:
      - manager
    environment:
      - METRICS_PORT=9200
      - USE_DISTRIBUTED_WORKERS=true
      # --- Logging Configuration ---
      - LOG_FORMAT=json
      - LOG_TO_FILE=0
    ports:
      - "9200:9200"      # Prometheus metrics
    healthcheck:
      test:
        - CMD
        - python
        - -c
        - >
          import urllib.request,sys;
          sys.exit(0 if urllib.request.urlopen(
            'http://localhost:9200/metrics', timeout=5
          ).getcode() == 200 else 1)
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 90s
    restart: unless-stopped

  manager:
    build:
      context: .
      target: runtime-bot
    container_name: manager
    env_file:
      - .env
    # Job orchestrator and callback handler
    entrypoint: ["/usr/local/bin/entrypoint.manager.sh"]
    environment:
      - METRICS_PORT=9150
      # --- Logging Configuration ---
      - LOG_FORMAT=json
      - LOG_TO_FILE=0
    ports:
      - "9150:9150"      # Manager metrics
    healthcheck:
      test:
        - CMD
        - python
        - -c
        - >
          import urllib.request,sys;
          sys.exit(0 if urllib.request.urlopen(
            'http://localhost:9150/metrics', timeout=5
          ).getcode() == 200 else 1)
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Worker service commented out - workers created dynamically by autoscaler
  # worker:
  #   build:
  #     context: .
  #     target: runtime-worker
  #   # Generic workers (scalable)
  #   entrypoint: ["/usr/local/bin/entrypoint.worker.sh"]
  #   # Scale with: docker-compose up --scale worker=3
  #   deploy:
  #     replicas: 1
  #   depends_on:
  #     - redis
  #     - manager
  #   environment:
  #     - METRICS_PORT=9100
  #     - DISPLAY=:99
  #     - REDIS_URL=redis://redis:6379/0
  #     # --- Logging Configuration ---
  #     - LOG_FORMAT=json
  #     - LOG_TO_FILE=0
  #   ports:
  #     - "9100"            # Expose worker metrics for Prometheus discovery
  #   volumes:
  #     - .:/app
  #     # - ./worker-config.yaml:/app/config.yaml:ro  # Mount config file
  #     # - ./worker-logs:/app/logs        # Uncomment to persist logs
  #   healthcheck:
  #     test:
  #       - CMD
  #       - python
  #       - -c
  #       - >
  #         import urllib.request,sys;
  #         sys.exit(0 if urllib.request.urlopen(
  #           'http://localhost:9100/metrics', timeout=5
  #         ).getcode() == 200 else 1)
  #     interval: 30s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 60s
  #   restart: unless-stopped

  # Example: A special worker with custom config/logs and job type
  # TEMPLATE: To add a special worker, copy this block and adjust as needed
  # worker-special:
  #   build: .
  #   container_name: discord-worker-special
  #   entrypoint: ["/usr/local/bin/entrypoint.worker.sh"]
  #   depends_on:
  #     - redis
  #   environment:
  #     - WORKER_PORT=9110
  #     - DISPLAY=:99
  #     - REDIS_URL=redis://redis:6379/0
  #     - WORKER_ID=worker-special
  #     - JOB_TYPE_PREFIX=tankpit
  #     - LOG_LEVEL=debug
  #   ports:
  #     - "9110:9110"
  #   volumes:
  #     - .:/app
  #     - ./worker-special-config.yaml:/app/config.yaml:ro
  #     - ./worker-special-logs:/app/logs
  #   healthcheck:
  #     test:
  #       - CMD
  #       - python
  #       - -c
  #       - >
  #         import urllib.request,sys;
  #         sys.exit(0 if urllib.request.urlopen(
  #           'http://localhost:9110/metrics', timeout=5
  #         ).getcode() == 200 else 1)
  #     interval: 30s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 60s
  # Place 'restart: unless-stopped' outside the template block when copying

  autoscaler:
    build:
      context: .
      target: runtime-autoscaler
    container_name: autoscaler
    env_file:
      - .env
    # Monitors queues and scales workers
    stop_signal: SIGTERM
    stop_grace_period: 30s
    command:
      - python
      - -m
      - scripts.autoscaler
      - --orchestrator
      - docker-api
    environment:
      - ORCHESTRATOR=docker-api
      - CHECK_INTERVAL=30
      - PYTHONPATH=/app
      - COMPOSE_PROJECT_NAME=discordbot
      - WORKER_METRICS_PORT=9100
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - .:/app
    healthcheck:
      test:
        - CMD
        - python
        - -c
        - "import sys; sys.exit(0)"
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
